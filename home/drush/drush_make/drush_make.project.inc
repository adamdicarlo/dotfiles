<?php
// $Id: drush_make.project.inc,v 1.1.2.53 2010/11/12 05:31:59 dmitrig01 Exp $

/**
 * The base project class.
 */
class DrushMakeProject {
  /**
   * Set attributes and retrieve project information.
   */
  function __construct($project) {
    $project['base_contrib_destination'] = $project['contrib_destination'];
    foreach ($project as $key => $value) {
      $this->{$key} = $value;
    }
  }

  /**
   * Build a project.
   */
  function make() {
    if (!empty($this->made)) {
      return FALSE;
    }
    $download_location = $this->findDownloadLocation();
    if (drush_make_download_factory($this->name, $this->download, $download_location) === FALSE) {
      return FALSE;
    }
    if (!$this->addLockfile($download_location)) {
      return FALSE;
    }
    if (!$this->applyPatches($download_location)) {
      return FALSE;
    }
    if (!$this->getTranslations($download_location)) {
      return FALSE;
    }
    if (!$this->recurse($download_location)) {
      return FALSE;
    }
    $this->made = TRUE;
    return TRUE;
  }

  function findDownloadLocation() {
    $this->path = $this->generatePath();
    $this->project_directory = !empty($this->directory_name) ? $this->directory_name : $this->name;
    $this->download_location = $this->path . '/' . $this->project_directory;
    // This directory shouldn't exist yet -- if it does, stop.
    if (is_dir($this->download_location)) {
      drush_set_error(dt('Directory not empty: %directory', array('%directory' => $this->download_location)));
      return FALSE;
    }
    else {
      drush_make_mkdir($this->download_location);
    }
    return $this->download_location;
  }

  /**
   * Retrieve and apply any patches specified by the makefile to this project.
   */
  function applyPatches($project_directory) {
    if (empty($this->patch)) {
      return TRUE;
    }

    $patches_txt = '';
    $ignore_checksums = drush_get_option('ignore-checksums');
    foreach ($this->patch as $info) {
      if (!is_array($info)) {
        $info = array('url' => $info);
      }
      // Download the patch.
      if ($filename = _drush_make_download_file($info)) {
        $patched = drush_shell_exec("patch -p0 -d %s < %s", $project_directory, $filename);
        if ($patched) {
          if (!$ignore_checksums) {
            if (isset($info['md5']) && md5(file_get_contents($filename)) !== $info['md5']) {
              drush_set_error(dt('Checksum failed to validate for %filename.', array('%filename' => $filename)));
              return FALSE;
            }
          }
          $patches_txt .= '- ' . $info['url'] . "\n";
        }
        drush_log($this->name . ' patched with ' . basename($filename) . '.', $patched ? 'ok' : 'error');
        drush_op('unlink', $filename);
      }
      else {
        drush_make_error('Unable to download ' . $info['url'] . '.');
        return FALSE;
      }
    }
    if (!empty($patches_txt) && !drush_get_option('no-patch-txt') && !file_exists($project_directory . '/PATCHES.txt')) {
      $patches_txt = "The following patches have been applied to this project:\n" .
        $patches_txt .
        "\nThis file was automatically generated by Drush Make (http://drupal.org/project/drush_make).";
      file_put_contents($project_directory . '/PATCHES.txt', $patches_txt);
      drush_log('Generated PATCHES.txt file for ' . $this->name, 'ok');
    }
    return TRUE;
  }

  /**
   * Add a lock file.
   */
  function addLockfile($project_directory) {
    if (!empty($this->lock)) {
      file_put_contents($project_directory . '/.drush-lock-update', $this->lock);
    }
    return TRUE;
  }

  /**
   * Retrieve translations for this project.
   */
  function getTranslations($project_directory) {
    static $cache = array();
    $langcodes = drush_get_option('translations', FALSE);
    if ($langcodes && $this->version !== drush_get_option('drush-make-version-best') && in_array($this->type, array('core', 'module', 'profile', 'theme'), TRUE)) {
      // Support the l10n_path, l10n_url keys from l10n_update. Note that the
      // l10n_server key is not supported.
      if (isset($this->l10n_path)) {
        $update_url = $this->l10n_path;
      }
      else {
        if (isset($this->l10n_url)) {
          $l10n_server = $this->l10n_url;
        }
        elseif ($this->location === drush_get_option('drush-make-update-default-url')) {
          $l10n_server = 'http://localize.drupal.org/l10n_server.xml';
        }
        else {
          $l10n_server = FALSE;
        }
        if ($l10n_server) {
          if (!isset($cache[$l10n_server])) {
            if ($filename = _drush_make_download_file($l10n_server)) {
              $server_info = simplexml_load_string(file_get_contents($filename));
              $cache[$l10n_server] = !empty($server_info->update_url) ? $server_info->update_url : FALSE;
              drush_op('unlink', $filename);
            }
          }
          if ($cache[$l10n_server]) {
            $update_url = $cache[$l10n_server];
          }
          else {
            drush_make_error('XML_ERROR', dt("Could not retrieve l10n update url for %project.", array('%project' => $project['name'])));
            return FALSE;
          }
        }
      }
      if ($update_url) {
        $failed = array();
        $langcodes = explode(',', $langcodes);
        foreach ($langcodes as $langcode) {
          $variables = array(
            '%project' => $this->name,
            '%release' => $this->type === 'core' ? $this->version : "{$this->core}-{$this->version}",
            '%core' => $this->core,
            '%language' => $langcode,
            '%filename' => '%filename',
          );
          $url = strtr($update_url, $variables);

          // Download the translation file.
          if ($filename = _drush_make_download_file($url)) {
            // If this is the core project type, download the translation file
            // and create two copies:
            // 1. To profiles/default/translations. It must be named
            //    langcode.po to be used properly by the installer.
            // 2. To modules/system/translations where it can be detected for
            //    import by other non-default install profiles.
            if ($this->type === 'core') {
              drush_make_mkdir($project_directory . '/profiles/default/translations');
              drush_make_mkdir($project_directory . '/modules/system/translations');
              drush_shell_exec("cp %s %s", $filename, $project_directory . '/profiles/default/translations/' . $langcode . '.po');
              drush_shell_exec("mv %s %s", $filename, $project_directory . '/modules/system/translations');
            }
            else {
              drush_make_mkdir($project_directory . '/translations');
              drush_shell_exec("mv %s %s", $filename, $project_directory . '/translations');
            }
          }
          else {
            $failed[] = $langcode;
          }
        }
        if (empty($failed)) {
          drush_log('All translations downloaded for ' . $this->name, 'ok');
        }
        else {
          drush_log('Unable to download translations for '. $this->name .': ' . implode(', ', $failed), 'warning');
        }
      }
    }
    return TRUE;
  }

  /**
   * Generate the proper path for this project type.
   *
   * @param $base
   *   Whether include the base part (tmp dir). Defaults to TRUE.
   */
  protected function generatePath($base = TRUE) {
    $path = array();
    if ($base) {
      $path[] = drush_make_tmp();
      $path[] = '__build__';
    }
    if (!empty($this->contrib_destination)) {
      $path[] = $this->contrib_destination;
    }
    if (!empty($this->subdir)) {
      $path[] = $this->subdir;
    }
    return implode('/', $path);
  }

  /**
   * Return the proper path for dependencies to be placed in.
   *
   * @return
   *   The path that dependencies will be placed in.
   */
  protected function buildPath() {
    return $this->base_contrib_destination;
  }

  function recurse($path) {
    if (!empty($this->directory_name)) {
      $directory = $this->directory_name;
    }
    $makefile = $this->download_location . '/' . $this->name . '.make';
    if (!file_exists($makefile)) {
      $makefile = $this->download_location . '/drupal-org.make';
      if (!file_exists($makefile)) {
        return;
      }
    }
    drush_log(dt("Found makefile: %makefile", array("%makefile" => basename($makefile))), 'ok');

    $info = drush_make_parse_info_file($makefile);
    if (!($info = drush_make_validate_info_file($info))) {
      return FALSE;
    }
    $build_path = $this->buildPath($this->name);
    drush_make_projects(TRUE, trim($build_path, '/'), $info, $this->build_path);
    drush_make_libraries(trim($build_path, '/'), $info, $this->build_path);
  }
}

class DrushMakeProject_Core extends DrushMakeProject {
  function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = '';
  }

  function findDownloadLocation() {
    $this->path = $this->download_location = $this->generatePath();
    $this->project_directory = '';
    if (is_dir($this->download_location)) {
      drush_set_error(dt('Directory not empty: %directory', array('%directory' => $this->download_location)));
      return FALSE;
    }
    else {
      drush_make_mkdir($this->download_location);
    }
    return $this->download_location;
  }
}

class DrushMakeProject_Library extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    // Allow libraries to specify where they should live in the build path.
    if (isset($project['destination'])) {
      $project_path = $project['destination'];
    }
    else {
      $project_path = 'libraries';
    }

    $this->contrib_destination = ($this->base_contrib_destination != '.' ? $this->base_contrib_destination . '/' : '') . $project_path;
  }
  // No recursion for libraries, sorry :-(
  function recurse() {}
}

class DrushMakeProject_Module extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = ($this->base_contrib_destination != '.' ? $this->base_contrib_destination . '/' : '') . 'modules';
  }
}

class DrushMakeProject_Profile extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = ($this->destination ? $this->destination : 'profiles');
  }

  protected function buildPath($directory) {
    return $this->generatePath(FALSE) . '/' . $directory;
  }
}

class DrushMakeProject_Theme extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = ($this->base_contrib_destination != '.' ? $this->base_contrib_destination . '/' : '') . 'themes';
  }
}

class DrushMakeProject_Translation extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    switch($project['core']) {
      case '5.x':
        // Don't think there's an automatic place we can put 5.x translations,
        // so we'll toss them in a translations directory in the Drupal root.
        $this->contrib_destination = ($this->base_contrib_destination != '.' ? $this->base_contrib_destination . '/' : '') . 'translations';
        break;
      default:
        $this->contrib_destination = '';
        break;
    }
  }
}

