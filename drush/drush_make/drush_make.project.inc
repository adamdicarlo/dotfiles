<?php
// $Id: drush_make.project.inc,v 1.1.2.35 2010/06/30 02:34:58 dmitrig01 Exp $

/**
 * The base project class.
 */
class DrushMakeProject {
  /**
   * Set attributes and retrieve project information.
   */
  function __construct($project) {
    $project['base_contrib_destination'] = $project['contrib_destination'];
    foreach ($project as $key => $value) {
      $this->{$key} = $value;
    }
    $this->downloadClass = drush_make_download_factory($this);
    if (!$this->downloadClass) {
      drush_make_error('BUILD_ERROR', dt('Could not find download type %type', array('%type' => $this->download['type'])));
    }
  }

  /**
   * Build a project.
   */
  function make() {
    if (!empty($this->made)) {
      return FALSE;
    }
    $download_location = $this->findDownloadLocation();
    if ($this->downloadClass->download($download_location) === FALSE) {
      return FALSE;
    }
    if (!$this->applyPatches($download_location)) {
      return FALSE;
    }
    if (!$this->recurse($download_location)) {
      return FALSE;
    }
    $this->made = TRUE;
    return TRUE;
  }

  function findDownloadLocation() {
    $this->path = $this->generatePath();
    $this->project_directory = !empty($this->directory_name) ? $this->directory_name : $this->name;
    $this->download_location = $this->path . '/' . $this->project_directory;
    // This directory shouldn't exist yet -- if it does, stop.
    if (is_dir($this->download_location)) {
      drush_set_error(dt('Directory not empty: %directory', array('%directory' => $this->download_location)));
      return FALSE;
    }
    else {
      drush_shell_exec("mkdir -p %s", $this->download_location);
    }
    return $this->download_location;
  }

  /**
   * Retrieve and apply any patches specified by the makefile to this project.
   */
  function applyPatches($project_directory) {
    if (!empty($this->patch)) {
      $patches_txt = '';
      foreach ($this->patch as $url) {
        // Download the patch.
        list($filename) = array_reverse(explode('/', $url));
        if (!drush_shell_exec('wget %s', $url)) {
          drush_shell_exec('curl -L -O %s', $url);
        }
        if (file_exists($filename)) {
          $patches_txt .= '- ' . $url . "\n";
          drush_shell_exec("mv %s %s", $filename, $project_directory);
          $patched = drush_shell_exec("patch -p0 -d %s < %s/%s", $project_directory, $project_directory, $filename);
          drush_log($this->name . ' patched with ' . $filename . '.', $patched ? 'ok' : 'error');
          drush_op('unlink', $project_directory . '/' . $filename);
        }
        else {
          drush_make_error('Unable to download ' . $filename . ' from ' . $url . '.');
          return FALSE;
        }
      }
      if (!empty($patches_txt) && !drush_get_option('no-patch-txt') && !file_exists($project_directory . '/PATCHES.txt')) {
        $patches_txt = "The following patches have been applied to this project:\n" .
          $patches_txt .
          "\nThis file was automatically generated by Drush Make (http://drupal.org/project/drush_make).";
        file_put_contents($project_directory . '/PATCHES.txt', $patches_txt);
        drush_log('Generated PATCHES.txt file for ' . $this->name, 'ok');
      }
    }
    return TRUE;
  }

  /**
   * Generate the proper path for this project type.
   *
   * @param $base
   *   Whether include the base part (tmp dir). Defaults to TRUE.
   */
  protected function generatePath($base = TRUE) {
    $path = array();
    if ($base) {
      $path[] = drush_make_tmp();
      $path[] = '__build__';
    }
    if (!empty($this->contrib_destination)) {
      $path[] = $this->contrib_destination;
    }
    if (!empty($this->subdir)) {
      $path[] = $this->subdir;
    }
    return implode('/', $path);
  }

  /**
   * Return the proper path for dependencies to be placed in.
   *
   * @return
   *   The path that dependencies will be placed in.
   */
  protected function buildPath() {
    return $this->base_contrib_destination;
  }

  function recurse($path) {
    if (!empty($this->directory_name)) {
      $directory = $this->directory_name;
    }
    $makefile = $this->download_location . '/' . $this->name . '.make';
    if (!file_exists($makefile)) {
      $makefile = $this->download_location . '/drupal-org.make';
      if (!file_exists($makefile)) {
        return;
      }
    }
    drush_log(dt("Found makefile: %makefile", array("%makefile" => basename($makefile))), 'ok');

    $info = drush_make_parse_info_file($makefile);
    if (!($info = drush_make_validate_info_file($info))) {
      return FALSE;
    }
    $build_path = $this->buildPath($this->name);
    drush_make_add_projects(TRUE, trim($build_path, '/'), $info, $this->build_path);
    drush_make_add_libraries(trim($build_path, '/'), $info, $this->build_path);
  }
}

class DrushMakeProject_Core extends DrushMakeProject {
  function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = '';
  }

  function findDownloadLocation() {
    $this->path = $this->download_location = $this->generatePath();
    $this->project_directory = '';
    if (is_dir($this->download_location)) {
      drush_set_error(dt('Directory not empty: %directory', array('%directory' => $this->download_location)));
      return FALSE;
    }
    else {
      drush_shell_exec("mkdir -p %s", $this->download_location);
    }
    return $this->download_location;
  }
}

class DrushMakeProject_Library extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    // Allow libraries to specify where they should live in the build path.
    if (isset($project['destination'])) {
      $project_path = $project['destination'];
    }
    else {
      $project_path = 'libraries';
    }
    
    $this->contrib_destination = $this->base_contrib_destination .'/'. $project_path;
  }
  // No recursion for libraries, sorry :-(
  function recurse() {}
}

class DrushMakeProject_Module extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = $this->base_contrib_destination .'/modules';
  }
}

class DrushMakeProject_Profile extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = 'profiles';
  }

  protected function buildPath($directory) {
    return $this->generatePath(FALSE) . '/' . $directory;
  }
}

class DrushMakeProject_Theme extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    $this->contrib_destination = $this->base_contrib_destination .'/themes';
  }
}

class DrushMakeProject_Translation extends DrushMakeProject {
  public function __construct(&$project) {
    parent::__construct($project);
    switch($project['core']) {
      case '5.x':
        // Don't think there's an automatic place we can put 5.x translations,
        // so we'll toss them in a translations directory in the Drupal root.
        $this->contrib_destination = $this->base_contrib_destination .'/translations';
        break;
      default:
        $this->contrib_destination = '';
        break;
    }
  }
}

